{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar score = document.querySelector(\".game-score\");\nvar initializeGameBtn = document.querySelector(\".button.start\");\nvar gameOver = document.querySelector(\".message-lose\");\nvar youWin = document.querySelector(\".message-win\");\nvar startMessage = document.querySelector(\".message-start\");\nvar rows = Array.from(document.querySelectorAll(\".field-row\"));\nvar board = Array(4).fill(0).map(function(x) {\n    return Array(4).fill(0);\n});\nvar KEY_DIRECTIONS = {\n    UP: \"ArrowUp\",\n    DOWN: \"ArrowDown\",\n    LEFT: \"ArrowLeft\",\n    RIGHT: \"ArrowRight\"\n};\nfunction findEmptyCell() {\n    var boardSize = {\n        row: 0,\n        column: 0\n    };\n    do {\n        boardSize.row = Math.floor(Math.random() * 4);\n        boardSize.column = Math.floor(Math.random() * 4);\n    }while (board[boardSize.row][boardSize.column] !== 0);\n    return boardSize;\n}\nfunction addNumber() {\n    var _findEmptyCell = findEmptyCell(), row = _findEmptyCell.row, column = _findEmptyCell.column;\n    board[row][column] = Math.random() < 0.9 ? 2 : 4;\n}\nfunction render() {\n    board.map(function(row, rowIdx) {\n        row.map(function(cell, columnIdx) {\n            var elem = rows[rowIdx].children[columnIdx];\n            if (cell === 0) {\n                elem.textContent = \"\";\n                elem.classList = \"field-cell\";\n            } else {\n                elem.textContent = cell;\n                elem.classList = \"field-cell field-cell--\".concat(cell);\n            }\n        });\n    });\n    score.textContent = setScore();\n}\nfunction startGame() {\n    board.map(function(row) {\n        return row.map(function(cell, cellIdx, cellArr) {\n            return cellArr[cellIdx] = 0;\n        });\n    });\n    render();\n    startMessage.classList.add(\"hidden\");\n    initializeGameBtn.classList.remove(\"start\");\n    initializeGameBtn.classList.add(\"restart\");\n    initializeGameBtn.textContent = \"Restart\";\n    score.textContent = \"0\";\n    if (!youWin.classList.contains(\"hidden\")) youWin.classList.add(\"hidden\");\n    if (!gameOver.classList.contains(\"hidden\")) gameOver.classList.add(\"hidden\");\n    addNumber();\n    addNumber();\n    render();\n}\nfunction setScore() {\n    return board.reduce(function(prev, row) {\n        return prev + row.reduce(function(sum, cell) {\n            return sum + cell;\n        });\n    }, 0);\n}\nfunction normalizeArr(move, initialArray) {\n    var useReverse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    var normalizedArray = [\n        [],\n        [],\n        [],\n        []\n    ];\n    if (move === KEY_DIRECTIONS.UP || move === KEY_DIRECTIONS.DOWN) {\n        for(var row = 0; row < 4; row++)for(var column = 0; column < 4; column++)normalizedArray[column][row] = initialArray[row][column];\n    }\n    if (move === KEY_DIRECTIONS.LEFT || move === KEY_DIRECTIONS.RIGHT) {\n        for(var row1 = 0; row1 < 4; row1++)for(var column1 = 0; column1 < 4; column1++)normalizedArray[row1][column1] = initialArray[row1][column1];\n    }\n    if (useReverse && (move === KEY_DIRECTIONS.RIGHT || move === KEY_DIRECTIONS.DOWN)) normalizedArray.map(function(row) {\n        return row.reverse();\n    });\n    return normalizedArray;\n}\nfunction makeMove(move) {\n    var newArr = normalizeArr(move, board, true);\n    var moveMaded = false;\n    newArr.map(function(row, rowInd) {\n        var cellsWithData = row.filter(function(cell) {\n            return cell !== 0;\n        });\n        cellsWithData.map(function(cell, cellIdx, cellArr) {\n            if (cell === cellArr[cellIdx + 1]) {\n                cellArr[cellIdx] *= 2;\n                cellArr.splice(cellIdx + 1, 1);\n                moveMaded = true;\n            }\n        });\n        moveMaded = moveMaded || cellsWithData.length !== 4;\n        row.map(function(cell, cellIdx, cellArr) {\n            cellArr[cellIdx] = cellsWithData[cellIdx] || 0;\n        });\n    });\n    if (!moveMaded) return false;\n    if (move === KEY_DIRECTIONS.RIGHT || move === KEY_DIRECTIONS.DOWN) newArr.map(function(row) {\n        return row.reverse();\n    });\n    return normalizeArr(move, newArr);\n}\ninitializeGameBtn.addEventListener(\"click\", startGame);\ndocument.addEventListener(\"keydown\", function(pressEvent) {\n    var anyMovesLeft = board.some(function(row) {\n        return row.some(function(cell) {\n            return cell === 0;\n        });\n    });\n    var moves = Object.values(KEY_DIRECTIONS);\n    var move = moves.includes(pressEvent.key) ? pressEvent.key : \"\";\n    var receivedArray = [];\n    if (move) {\n        receivedArray = makeMove(move);\n        if (!receivedArray || !anyMovesLeft) anyMovesLeft = moves.some(function(shift) {\n            if (move === shift) return false;\n            return !!makeMove(shift);\n        });\n        if (!anyMovesLeft) gameOver.classList.remove(\"hidden\");\n        if (receivedArray) {\n            board.map(function(row, rowIdx, rowArr) {\n                row.map(function(cell, columnIdx) {\n                    rowArr[rowIdx][columnIdx] = receivedArray[rowIdx][columnIdx];\n                });\n            });\n            if (board.some(function(row) {\n                return row.some(function(cell) {\n                    return cell === 2048;\n                });\n            })) youWin.classList.remove(\"hidden\");\n            addNumber();\n            render();\n        }\n    }\n});\n\n//# sourceMappingURL=index.47f939b3.js.map\n","'use strict';\n\nconst score = document.querySelector('.game-score');\nconst initializeGameBtn = document.querySelector('.button.start');\nconst gameOver = document.querySelector('.message-lose');\nconst youWin = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst rows = Array.from(document.querySelectorAll('.field-row'));\nconst board = Array(4)\n  .fill(0)\n  .map((x) => Array(4).fill(0));\n\nconst KEY_DIRECTIONS = {\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n};\n\nfunction findEmptyCell() {\n  const boardSize = {\n    row: 0,\n    column: 0,\n  };\n\n  do {\n    boardSize.row = Math.floor(Math.random() * 4);\n    boardSize.column = Math.floor(Math.random() * 4);\n  } while (board[boardSize.row][boardSize.column] !== 0);\n\n  return boardSize;\n}\n\nfunction addNumber() {\n  const { row, column } = findEmptyCell();\n\n  board[row][column] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction render() {\n  board.map((row, rowIdx) => {\n    row.map((cell, columnIdx) => {\n      const elem = rows[rowIdx].children[columnIdx];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.classList = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.classList = `field-cell field-cell--${cell}`;\n      }\n    });\n  });\n\n  score.textContent = setScore();\n}\n\nfunction startGame() {\n  board.map((row) =>\n    row.map((cell, cellIdx, cellArr) => (cellArr[cellIdx] = 0)),\n  );\n\n  render();\n  startMessage.classList.add('hidden');\n  initializeGameBtn.classList.remove('start');\n  initializeGameBtn.classList.add('restart');\n  initializeGameBtn.textContent = 'Restart';\n  score.textContent = '0';\n\n  if (!youWin.classList.contains('hidden')) {\n    youWin.classList.add('hidden');\n  }\n\n  if (!gameOver.classList.contains('hidden')) {\n    gameOver.classList.add('hidden');\n  }\n\n  addNumber();\n  addNumber();\n  render();\n}\n\nfunction setScore() {\n  return board.reduce(\n    (prev, row) => prev + row.reduce((sum, cell) => sum + cell),\n    0,\n  );\n}\n\nfunction normalizeArr(move, initialArray, useReverse = false) {\n  const normalizedArray = [[], [], [], []];\n\n  if (move === KEY_DIRECTIONS.UP || move === KEY_DIRECTIONS.DOWN) {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        normalizedArray[column][row] = initialArray[row][column];\n      }\n    }\n  }\n\n  if (move === KEY_DIRECTIONS.LEFT || move === KEY_DIRECTIONS.RIGHT) {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        normalizedArray[row][column] = initialArray[row][column];\n      }\n    }\n  }\n\n  if (\n    useReverse\n    && (move === KEY_DIRECTIONS.RIGHT || move === KEY_DIRECTIONS.DOWN)\n  ) {\n    normalizedArray.map((row) => row.reverse());\n  }\n\n  return normalizedArray;\n}\n\nfunction makeMove(move) {\n  const newArr = normalizeArr(move, board, true);\n  let moveMaded = false;\n\n  newArr.map((row, rowInd) => {\n    const cellsWithData = row.filter((cell) => cell !== 0);\n\n    cellsWithData.map((cell, cellIdx, cellArr) => {\n      if (cell === cellArr[cellIdx + 1]) {\n        cellArr[cellIdx] *= 2;\n        cellArr.splice(cellIdx + 1, 1);\n        moveMaded = true;\n      }\n    });\n    moveMaded = moveMaded || cellsWithData.length !== 4;\n\n    row.map((cell, cellIdx, cellArr) => {\n      cellArr[cellIdx] = cellsWithData[cellIdx] || 0;\n    });\n  });\n\n  if (!moveMaded) {\n    return false;\n  }\n\n  if (move === KEY_DIRECTIONS.RIGHT || move === KEY_DIRECTIONS.DOWN) {\n    newArr.map((row) => row.reverse());\n  }\n\n  return normalizeArr(move, newArr);\n}\n\ninitializeGameBtn.addEventListener('click', startGame);\n\ndocument.addEventListener('keydown', (pressEvent) => {\n  let anyMovesLeft = board.some((row) => row.some((cell) => cell === 0));\n  const moves = Object.values(KEY_DIRECTIONS);\n\n  const move = moves.includes(pressEvent.key) ? pressEvent.key : '';\n  let receivedArray = [];\n\n  if (move) {\n    receivedArray = makeMove(move);\n\n    if (!receivedArray || !anyMovesLeft) {\n      anyMovesLeft = moves.some((shift) => {\n        if (move === shift) {\n          return false;\n        }\n\n        return !!makeMove(shift);\n      });\n    }\n\n    if (!anyMovesLeft) {\n      gameOver.classList.remove('hidden');\n    }\n\n    if (receivedArray) {\n      board.map((row, rowIdx, rowArr) => {\n        row.map((cell, columnIdx) => {\n          rowArr[rowIdx][columnIdx] = receivedArray[rowIdx][columnIdx];\n        });\n      });\n\n      if (board.some((row) => row.some((cell) => cell === 2048))) {\n        youWin.classList.remove('hidden');\n      }\n\n      addNumber();\n      render();\n    }\n  }\n});\n"],"names":["score","document","querySelector","initializeGameBtn","gameOver","youWin","startMessage","rows","Array","from","querySelectorAll","board","fill","map","x","KEY_DIRECTIONS","UP","DOWN","LEFT","RIGHT","addNumber","_findEmptyCell","findEmptyCell","boardSize","row","column","Math","floor","random","render","rowIdx","cell","columnIdx","elem","children","textContent","classList","concat","reduce","prev","sum","normalizeArr","move","initialArray","useReverse","arguments","length","normalizedArray","row1","column1","reverse","makeMove","newArr","moveMaded","rowInd","cellsWithData","filter","cellIdx","cellArr","splice","addEventListener","add","remove","contains","pressEvent","anyMovesLeft","some","moves","Object","values","includes","key","receivedArray","shift","rowArr"],"version":3,"file":"index.47f939b3.js.map"}